{"ast":null,"code":"import React, { useState, useEffect } from 'react';\nexport default function useSortForm(initialData) {\n  const [data, setData] = useState(initialData);\n  useEffect(() => {\n    setData(data);\n  }, []);\n  console.log('data: ' + data);\n\n  const setSortAssets = sortKey => {\n    const compare_fun = (a, b) => {\n      if (a[sortKey] < b[sortKey]) {\n        return -1;\n      } else if (a[sortKey] > b[sortKey]) {\n        return 1;\n      } else {\n        return 0;\n      }\n    };\n\n    setData(data.sort(compare_fun)); //console.log('datasorted: '+ data[0].name)\n  };\n\n  return [data, setSortAssets];\n}","map":{"version":3,"sources":["/Users/xiongjieyi/repositories/react_hooks/src/components/useSortForm.js"],"names":["React","useState","useEffect","useSortForm","initialData","data","setData","console","log","setSortAssets","sortKey","compare_fun","a","b","sort"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,eAAe,SAASC,WAAT,CAAsBC,WAAtB,EAAmC;AAChD,QAAM,CAAEC,IAAF,EAAQC,OAAR,IAAoBL,QAAQ,CAACG,WAAD,CAAlC;AACAF,EAAAA,SAAS,CAAC,MAAM;AACZI,IAAAA,OAAO,CAACD,IAAD,CAAP;AACH,GAFQ,EAEP,EAFO,CAAT;AAGAE,EAAAA,OAAO,CAACC,GAAR,CAAY,WAAUH,IAAtB;;AACA,QAAMI,aAAa,GAAIC,OAAD,IAAW;AAC/B,UAAMC,WAAW,GAAC,CAACC,CAAD,EAAIC,CAAJ,KAAQ;AACxB,UAAGD,CAAC,CAACF,OAAD,CAAD,GAAaG,CAAC,CAACH,OAAD,CAAjB,EAA2B;AACzB,eAAO,CAAC,CAAR;AACD,OAFD,MAEM,IAAGE,CAAC,CAACF,OAAD,CAAD,GAAaG,CAAC,CAACH,OAAD,CAAjB,EAA2B;AAC/B,eAAO,CAAP;AACD,OAFK,MAED;AACH,eAAO,CAAP;AACD;AACF,KARD;;AAWAJ,IAAAA,OAAO,CAACD,IAAI,CAACS,IAAL,CAAUH,WAAV,CAAD,CAAP,CAZ+B,CAe/B;AACC,GAhBH;;AAkBA,SAAO,CAACN,IAAD,EAAOI,aAAP,CAAP;AACD","sourcesContent":["import React, { useState, useEffect } from 'react'\n\nexport default function useSortForm (initialData) {\n  const [ data, setData ] = useState(initialData) \n  useEffect(() => {\n      setData(data)\n  },[]) \n  console.log('data: '+ data)\n  const setSortAssets = (sortKey)=>{\n    const compare_fun=(a, b)=>{\n      if(a[sortKey] < b[sortKey]){\n        return -1;\n      }else if(a[sortKey] > b[sortKey]){\n        return 1;\n      }else{\n        return 0;\n      }\n    }\n\n    \n    setData(data.sort(compare_fun))   \n    \n    \n    //console.log('datasorted: '+ data[0].name)\n    } \n    \n  return [data, setSortAssets] \n}\n \n"]},"metadata":{},"sourceType":"module"}